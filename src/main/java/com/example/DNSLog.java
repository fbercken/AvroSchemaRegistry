/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Represents an DNSLog entry */
@org.apache.avro.specific.AvroGenerated
public class DNSLog extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4311933001728705985L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DNSLog\",\"namespace\":\"com.example\",\"doc\":\"Represents an DNSLog entry\",\"fields\":[{\"name\":\"uid\",\"type\":\"string\"},{\"name\":\"originh\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"originp\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"resph\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"respp\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"proto\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"port\",\"type\":\"int\",\"default\":8080},{\"name\":\"ts\",\"type\":\"long\",\"default\":0},{\"name\":\"query\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"qclass\",\"type\":\"float\",\"default\":0},{\"name\":\"qclassname\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"qtype\",\"type\":\"float\",\"default\":0},{\"name\":\"qtypename\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"rcode\",\"type\":\"float\",\"default\":0},{\"name\":\"rcodename\",\"type\":\"string\",\"default\":\"\"},{\"name\":\"Z\",\"type\":\"int\",\"default\":0},{\"name\":\"OR\",\"type\":\"boolean\",\"default\":false},{\"name\":\"AA\",\"type\":\"boolean\",\"default\":false},{\"name\":\"TC\",\"type\":\"boolean\",\"default\":false},{\"name\":\"rejected\",\"type\":\"boolean\",\"default\":false},{\"name\":\"Answers\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"default\":[]},{\"name\":\"TLLs\",\"type\":{\"type\":\"array\",\"items\":\"int\"},\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DNSLog> ENCODER =
      new BinaryMessageEncoder<DNSLog>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DNSLog> DECODER =
      new BinaryMessageDecoder<DNSLog>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DNSLog> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DNSLog> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DNSLog> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DNSLog>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DNSLog to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DNSLog from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DNSLog instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DNSLog fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence uid;
   private java.lang.CharSequence originh;
   private java.lang.CharSequence originp;
   private java.lang.CharSequence resph;
   private java.lang.CharSequence respp;
   private java.lang.CharSequence proto;
   private int port;
   private long ts;
   private java.lang.CharSequence query;
   private float qclass;
   private java.lang.CharSequence qclassname;
   private float qtype;
   private java.lang.CharSequence qtypename;
   private float rcode;
   private java.lang.CharSequence rcodename;
   private int Z;
   private boolean OR;
   private boolean AA;
   private boolean TC;
   private boolean rejected;
   private java.util.List<java.lang.CharSequence> Answers;
   private java.util.List<java.lang.Integer> TLLs;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DNSLog() {}

  /**
   * All-args constructor.
   * @param uid The new value for uid
   * @param originh The new value for originh
   * @param originp The new value for originp
   * @param resph The new value for resph
   * @param respp The new value for respp
   * @param proto The new value for proto
   * @param port The new value for port
   * @param ts The new value for ts
   * @param query The new value for query
   * @param qclass The new value for qclass
   * @param qclassname The new value for qclassname
   * @param qtype The new value for qtype
   * @param qtypename The new value for qtypename
   * @param rcode The new value for rcode
   * @param rcodename The new value for rcodename
   * @param Z The new value for Z
   * @param OR The new value for OR
   * @param AA The new value for AA
   * @param TC The new value for TC
   * @param rejected The new value for rejected
   * @param Answers The new value for Answers
   * @param TLLs The new value for TLLs
   */
  public DNSLog(java.lang.CharSequence uid, java.lang.CharSequence originh, java.lang.CharSequence originp, java.lang.CharSequence resph, java.lang.CharSequence respp, java.lang.CharSequence proto, java.lang.Integer port, java.lang.Long ts, java.lang.CharSequence query, java.lang.Float qclass, java.lang.CharSequence qclassname, java.lang.Float qtype, java.lang.CharSequence qtypename, java.lang.Float rcode, java.lang.CharSequence rcodename, java.lang.Integer Z, java.lang.Boolean OR, java.lang.Boolean AA, java.lang.Boolean TC, java.lang.Boolean rejected, java.util.List<java.lang.CharSequence> Answers, java.util.List<java.lang.Integer> TLLs) {
    this.uid = uid;
    this.originh = originh;
    this.originp = originp;
    this.resph = resph;
    this.respp = respp;
    this.proto = proto;
    this.port = port;
    this.ts = ts;
    this.query = query;
    this.qclass = qclass;
    this.qclassname = qclassname;
    this.qtype = qtype;
    this.qtypename = qtypename;
    this.rcode = rcode;
    this.rcodename = rcodename;
    this.Z = Z;
    this.OR = OR;
    this.AA = AA;
    this.TC = TC;
    this.rejected = rejected;
    this.Answers = Answers;
    this.TLLs = TLLs;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uid;
    case 1: return originh;
    case 2: return originp;
    case 3: return resph;
    case 4: return respp;
    case 5: return proto;
    case 6: return port;
    case 7: return ts;
    case 8: return query;
    case 9: return qclass;
    case 10: return qclassname;
    case 11: return qtype;
    case 12: return qtypename;
    case 13: return rcode;
    case 14: return rcodename;
    case 15: return Z;
    case 16: return OR;
    case 17: return AA;
    case 18: return TC;
    case 19: return rejected;
    case 20: return Answers;
    case 21: return TLLs;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uid = (java.lang.CharSequence)value$; break;
    case 1: originh = (java.lang.CharSequence)value$; break;
    case 2: originp = (java.lang.CharSequence)value$; break;
    case 3: resph = (java.lang.CharSequence)value$; break;
    case 4: respp = (java.lang.CharSequence)value$; break;
    case 5: proto = (java.lang.CharSequence)value$; break;
    case 6: port = (java.lang.Integer)value$; break;
    case 7: ts = (java.lang.Long)value$; break;
    case 8: query = (java.lang.CharSequence)value$; break;
    case 9: qclass = (java.lang.Float)value$; break;
    case 10: qclassname = (java.lang.CharSequence)value$; break;
    case 11: qtype = (java.lang.Float)value$; break;
    case 12: qtypename = (java.lang.CharSequence)value$; break;
    case 13: rcode = (java.lang.Float)value$; break;
    case 14: rcodename = (java.lang.CharSequence)value$; break;
    case 15: Z = (java.lang.Integer)value$; break;
    case 16: OR = (java.lang.Boolean)value$; break;
    case 17: AA = (java.lang.Boolean)value$; break;
    case 18: TC = (java.lang.Boolean)value$; break;
    case 19: rejected = (java.lang.Boolean)value$; break;
    case 20: Answers = (java.util.List<java.lang.CharSequence>)value$; break;
    case 21: TLLs = (java.util.List<java.lang.Integer>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'uid' field.
   * @return The value of the 'uid' field.
   */
  public java.lang.CharSequence getUid() {
    return uid;
  }


  /**
   * Sets the value of the 'uid' field.
   * @param value the value to set.
   */
  public void setUid(java.lang.CharSequence value) {
    this.uid = value;
  }

  /**
   * Gets the value of the 'originh' field.
   * @return The value of the 'originh' field.
   */
  public java.lang.CharSequence getOriginh() {
    return originh;
  }


  /**
   * Sets the value of the 'originh' field.
   * @param value the value to set.
   */
  public void setOriginh(java.lang.CharSequence value) {
    this.originh = value;
  }

  /**
   * Gets the value of the 'originp' field.
   * @return The value of the 'originp' field.
   */
  public java.lang.CharSequence getOriginp() {
    return originp;
  }


  /**
   * Sets the value of the 'originp' field.
   * @param value the value to set.
   */
  public void setOriginp(java.lang.CharSequence value) {
    this.originp = value;
  }

  /**
   * Gets the value of the 'resph' field.
   * @return The value of the 'resph' field.
   */
  public java.lang.CharSequence getResph() {
    return resph;
  }


  /**
   * Sets the value of the 'resph' field.
   * @param value the value to set.
   */
  public void setResph(java.lang.CharSequence value) {
    this.resph = value;
  }

  /**
   * Gets the value of the 'respp' field.
   * @return The value of the 'respp' field.
   */
  public java.lang.CharSequence getRespp() {
    return respp;
  }


  /**
   * Sets the value of the 'respp' field.
   * @param value the value to set.
   */
  public void setRespp(java.lang.CharSequence value) {
    this.respp = value;
  }

  /**
   * Gets the value of the 'proto' field.
   * @return The value of the 'proto' field.
   */
  public java.lang.CharSequence getProto() {
    return proto;
  }


  /**
   * Sets the value of the 'proto' field.
   * @param value the value to set.
   */
  public void setProto(java.lang.CharSequence value) {
    this.proto = value;
  }

  /**
   * Gets the value of the 'port' field.
   * @return The value of the 'port' field.
   */
  public int getPort() {
    return port;
  }


  /**
   * Sets the value of the 'port' field.
   * @param value the value to set.
   */
  public void setPort(int value) {
    this.port = value;
  }

  /**
   * Gets the value of the 'ts' field.
   * @return The value of the 'ts' field.
   */
  public long getTs() {
    return ts;
  }


  /**
   * Sets the value of the 'ts' field.
   * @param value the value to set.
   */
  public void setTs(long value) {
    this.ts = value;
  }

  /**
   * Gets the value of the 'query' field.
   * @return The value of the 'query' field.
   */
  public java.lang.CharSequence getQuery() {
    return query;
  }


  /**
   * Sets the value of the 'query' field.
   * @param value the value to set.
   */
  public void setQuery(java.lang.CharSequence value) {
    this.query = value;
  }

  /**
   * Gets the value of the 'qclass' field.
   * @return The value of the 'qclass' field.
   */
  public float getQclass() {
    return qclass;
  }


  /**
   * Sets the value of the 'qclass' field.
   * @param value the value to set.
   */
  public void setQclass(float value) {
    this.qclass = value;
  }

  /**
   * Gets the value of the 'qclassname' field.
   * @return The value of the 'qclassname' field.
   */
  public java.lang.CharSequence getQclassname() {
    return qclassname;
  }


  /**
   * Sets the value of the 'qclassname' field.
   * @param value the value to set.
   */
  public void setQclassname(java.lang.CharSequence value) {
    this.qclassname = value;
  }

  /**
   * Gets the value of the 'qtype' field.
   * @return The value of the 'qtype' field.
   */
  public float getQtype() {
    return qtype;
  }


  /**
   * Sets the value of the 'qtype' field.
   * @param value the value to set.
   */
  public void setQtype(float value) {
    this.qtype = value;
  }

  /**
   * Gets the value of the 'qtypename' field.
   * @return The value of the 'qtypename' field.
   */
  public java.lang.CharSequence getQtypename() {
    return qtypename;
  }


  /**
   * Sets the value of the 'qtypename' field.
   * @param value the value to set.
   */
  public void setQtypename(java.lang.CharSequence value) {
    this.qtypename = value;
  }

  /**
   * Gets the value of the 'rcode' field.
   * @return The value of the 'rcode' field.
   */
  public float getRcode() {
    return rcode;
  }


  /**
   * Sets the value of the 'rcode' field.
   * @param value the value to set.
   */
  public void setRcode(float value) {
    this.rcode = value;
  }

  /**
   * Gets the value of the 'rcodename' field.
   * @return The value of the 'rcodename' field.
   */
  public java.lang.CharSequence getRcodename() {
    return rcodename;
  }


  /**
   * Sets the value of the 'rcodename' field.
   * @param value the value to set.
   */
  public void setRcodename(java.lang.CharSequence value) {
    this.rcodename = value;
  }

  /**
   * Gets the value of the 'Z' field.
   * @return The value of the 'Z' field.
   */
  public int getZ() {
    return Z;
  }


  /**
   * Sets the value of the 'Z' field.
   * @param value the value to set.
   */
  public void setZ(int value) {
    this.Z = value;
  }

  /**
   * Gets the value of the 'OR' field.
   * @return The value of the 'OR' field.
   */
  public boolean getOR() {
    return OR;
  }


  /**
   * Sets the value of the 'OR' field.
   * @param value the value to set.
   */
  public void setOR(boolean value) {
    this.OR = value;
  }

  /**
   * Gets the value of the 'AA' field.
   * @return The value of the 'AA' field.
   */
  public boolean getAA() {
    return AA;
  }


  /**
   * Sets the value of the 'AA' field.
   * @param value the value to set.
   */
  public void setAA(boolean value) {
    this.AA = value;
  }

  /**
   * Gets the value of the 'TC' field.
   * @return The value of the 'TC' field.
   */
  public boolean getTC() {
    return TC;
  }


  /**
   * Sets the value of the 'TC' field.
   * @param value the value to set.
   */
  public void setTC(boolean value) {
    this.TC = value;
  }

  /**
   * Gets the value of the 'rejected' field.
   * @return The value of the 'rejected' field.
   */
  public boolean getRejected() {
    return rejected;
  }


  /**
   * Sets the value of the 'rejected' field.
   * @param value the value to set.
   */
  public void setRejected(boolean value) {
    this.rejected = value;
  }

  /**
   * Gets the value of the 'Answers' field.
   * @return The value of the 'Answers' field.
   */
  public java.util.List<java.lang.CharSequence> getAnswers() {
    return Answers;
  }


  /**
   * Sets the value of the 'Answers' field.
   * @param value the value to set.
   */
  public void setAnswers(java.util.List<java.lang.CharSequence> value) {
    this.Answers = value;
  }

  /**
   * Gets the value of the 'TLLs' field.
   * @return The value of the 'TLLs' field.
   */
  public java.util.List<java.lang.Integer> getTLLs() {
    return TLLs;
  }


  /**
   * Sets the value of the 'TLLs' field.
   * @param value the value to set.
   */
  public void setTLLs(java.util.List<java.lang.Integer> value) {
    this.TLLs = value;
  }

  /**
   * Creates a new DNSLog RecordBuilder.
   * @return A new DNSLog RecordBuilder
   */
  public static com.example.DNSLog.Builder newBuilder() {
    return new com.example.DNSLog.Builder();
  }

  /**
   * Creates a new DNSLog RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DNSLog RecordBuilder
   */
  public static com.example.DNSLog.Builder newBuilder(com.example.DNSLog.Builder other) {
    if (other == null) {
      return new com.example.DNSLog.Builder();
    } else {
      return new com.example.DNSLog.Builder(other);
    }
  }

  /**
   * Creates a new DNSLog RecordBuilder by copying an existing DNSLog instance.
   * @param other The existing instance to copy.
   * @return A new DNSLog RecordBuilder
   */
  public static com.example.DNSLog.Builder newBuilder(com.example.DNSLog other) {
    if (other == null) {
      return new com.example.DNSLog.Builder();
    } else {
      return new com.example.DNSLog.Builder(other);
    }
  }

  /**
   * RecordBuilder for DNSLog instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DNSLog>
    implements org.apache.avro.data.RecordBuilder<DNSLog> {

    private java.lang.CharSequence uid;
    private java.lang.CharSequence originh;
    private java.lang.CharSequence originp;
    private java.lang.CharSequence resph;
    private java.lang.CharSequence respp;
    private java.lang.CharSequence proto;
    private int port;
    private long ts;
    private java.lang.CharSequence query;
    private float qclass;
    private java.lang.CharSequence qclassname;
    private float qtype;
    private java.lang.CharSequence qtypename;
    private float rcode;
    private java.lang.CharSequence rcodename;
    private int Z;
    private boolean OR;
    private boolean AA;
    private boolean TC;
    private boolean rejected;
    private java.util.List<java.lang.CharSequence> Answers;
    private java.util.List<java.lang.Integer> TLLs;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.DNSLog.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uid)) {
        this.uid = data().deepCopy(fields()[0].schema(), other.uid);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.originh)) {
        this.originh = data().deepCopy(fields()[1].schema(), other.originh);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.originp)) {
        this.originp = data().deepCopy(fields()[2].schema(), other.originp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.resph)) {
        this.resph = data().deepCopy(fields()[3].schema(), other.resph);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.respp)) {
        this.respp = data().deepCopy(fields()[4].schema(), other.respp);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.proto)) {
        this.proto = data().deepCopy(fields()[5].schema(), other.proto);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.port)) {
        this.port = data().deepCopy(fields()[6].schema(), other.port);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.ts)) {
        this.ts = data().deepCopy(fields()[7].schema(), other.ts);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.query)) {
        this.query = data().deepCopy(fields()[8].schema(), other.query);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.qclass)) {
        this.qclass = data().deepCopy(fields()[9].schema(), other.qclass);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.qclassname)) {
        this.qclassname = data().deepCopy(fields()[10].schema(), other.qclassname);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.qtype)) {
        this.qtype = data().deepCopy(fields()[11].schema(), other.qtype);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.qtypename)) {
        this.qtypename = data().deepCopy(fields()[12].schema(), other.qtypename);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.rcode)) {
        this.rcode = data().deepCopy(fields()[13].schema(), other.rcode);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.rcodename)) {
        this.rcodename = data().deepCopy(fields()[14].schema(), other.rcodename);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.Z)) {
        this.Z = data().deepCopy(fields()[15].schema(), other.Z);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.OR)) {
        this.OR = data().deepCopy(fields()[16].schema(), other.OR);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.AA)) {
        this.AA = data().deepCopy(fields()[17].schema(), other.AA);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.TC)) {
        this.TC = data().deepCopy(fields()[18].schema(), other.TC);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.rejected)) {
        this.rejected = data().deepCopy(fields()[19].schema(), other.rejected);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.Answers)) {
        this.Answers = data().deepCopy(fields()[20].schema(), other.Answers);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.TLLs)) {
        this.TLLs = data().deepCopy(fields()[21].schema(), other.TLLs);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
    }

    /**
     * Creates a Builder by copying an existing DNSLog instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.DNSLog other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.uid)) {
        this.uid = data().deepCopy(fields()[0].schema(), other.uid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.originh)) {
        this.originh = data().deepCopy(fields()[1].schema(), other.originh);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.originp)) {
        this.originp = data().deepCopy(fields()[2].schema(), other.originp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.resph)) {
        this.resph = data().deepCopy(fields()[3].schema(), other.resph);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.respp)) {
        this.respp = data().deepCopy(fields()[4].schema(), other.respp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.proto)) {
        this.proto = data().deepCopy(fields()[5].schema(), other.proto);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.port)) {
        this.port = data().deepCopy(fields()[6].schema(), other.port);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.ts)) {
        this.ts = data().deepCopy(fields()[7].schema(), other.ts);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.query)) {
        this.query = data().deepCopy(fields()[8].schema(), other.query);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.qclass)) {
        this.qclass = data().deepCopy(fields()[9].schema(), other.qclass);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.qclassname)) {
        this.qclassname = data().deepCopy(fields()[10].schema(), other.qclassname);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.qtype)) {
        this.qtype = data().deepCopy(fields()[11].schema(), other.qtype);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.qtypename)) {
        this.qtypename = data().deepCopy(fields()[12].schema(), other.qtypename);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.rcode)) {
        this.rcode = data().deepCopy(fields()[13].schema(), other.rcode);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.rcodename)) {
        this.rcodename = data().deepCopy(fields()[14].schema(), other.rcodename);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.Z)) {
        this.Z = data().deepCopy(fields()[15].schema(), other.Z);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.OR)) {
        this.OR = data().deepCopy(fields()[16].schema(), other.OR);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.AA)) {
        this.AA = data().deepCopy(fields()[17].schema(), other.AA);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.TC)) {
        this.TC = data().deepCopy(fields()[18].schema(), other.TC);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.rejected)) {
        this.rejected = data().deepCopy(fields()[19].schema(), other.rejected);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.Answers)) {
        this.Answers = data().deepCopy(fields()[20].schema(), other.Answers);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.TLLs)) {
        this.TLLs = data().deepCopy(fields()[21].schema(), other.TLLs);
        fieldSetFlags()[21] = true;
      }
    }

    /**
      * Gets the value of the 'uid' field.
      * @return The value.
      */
    public java.lang.CharSequence getUid() {
      return uid;
    }


    /**
      * Sets the value of the 'uid' field.
      * @param value The value of 'uid'.
      * @return This builder.
      */
    public com.example.DNSLog.Builder setUid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uid' field has been set.
      * @return True if the 'uid' field has been set, false otherwise.
      */
    public boolean hasUid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uid' field.
      * @return This builder.
      */
    public com.example.DNSLog.Builder clearUid() {
      uid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'originh' field.
      * @return The value.
      */
    public java.lang.CharSequence getOriginh() {
      return originh;
    }


    /**
      * Sets the value of the 'originh' field.
      * @param value The value of 'originh'.
      * @return This builder.
      */
    public com.example.DNSLog.Builder setOriginh(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.originh = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'originh' field has been set.
      * @return True if the 'originh' field has been set, false otherwise.
      */
    public boolean hasOriginh() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'originh' field.
      * @return This builder.
      */
    public com.example.DNSLog.Builder clearOriginh() {
      originh = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'originp' field.
      * @return The value.
      */
    public java.lang.CharSequence getOriginp() {
      return originp;
    }


    /**
      * Sets the value of the 'originp' field.
      * @param value The value of 'originp'.
      * @return This builder.
      */
    public com.example.DNSLog.Builder setOriginp(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.originp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'originp' field has been set.
      * @return True if the 'originp' field has been set, false otherwise.
      */
    public boolean hasOriginp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'originp' field.
      * @return This builder.
      */
    public com.example.DNSLog.Builder clearOriginp() {
      originp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'resph' field.
      * @return The value.
      */
    public java.lang.CharSequence getResph() {
      return resph;
    }


    /**
      * Sets the value of the 'resph' field.
      * @param value The value of 'resph'.
      * @return This builder.
      */
    public com.example.DNSLog.Builder setResph(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.resph = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'resph' field has been set.
      * @return True if the 'resph' field has been set, false otherwise.
      */
    public boolean hasResph() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'resph' field.
      * @return This builder.
      */
    public com.example.DNSLog.Builder clearResph() {
      resph = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'respp' field.
      * @return The value.
      */
    public java.lang.CharSequence getRespp() {
      return respp;
    }


    /**
      * Sets the value of the 'respp' field.
      * @param value The value of 'respp'.
      * @return This builder.
      */
    public com.example.DNSLog.Builder setRespp(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.respp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'respp' field has been set.
      * @return True if the 'respp' field has been set, false otherwise.
      */
    public boolean hasRespp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'respp' field.
      * @return This builder.
      */
    public com.example.DNSLog.Builder clearRespp() {
      respp = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'proto' field.
      * @return The value.
      */
    public java.lang.CharSequence getProto() {
      return proto;
    }


    /**
      * Sets the value of the 'proto' field.
      * @param value The value of 'proto'.
      * @return This builder.
      */
    public com.example.DNSLog.Builder setProto(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.proto = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'proto' field has been set.
      * @return True if the 'proto' field has been set, false otherwise.
      */
    public boolean hasProto() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'proto' field.
      * @return This builder.
      */
    public com.example.DNSLog.Builder clearProto() {
      proto = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'port' field.
      * @return The value.
      */
    public int getPort() {
      return port;
    }


    /**
      * Sets the value of the 'port' field.
      * @param value The value of 'port'.
      * @return This builder.
      */
    public com.example.DNSLog.Builder setPort(int value) {
      validate(fields()[6], value);
      this.port = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'port' field has been set.
      * @return True if the 'port' field has been set, false otherwise.
      */
    public boolean hasPort() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'port' field.
      * @return This builder.
      */
    public com.example.DNSLog.Builder clearPort() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'ts' field.
      * @return The value.
      */
    public long getTs() {
      return ts;
    }


    /**
      * Sets the value of the 'ts' field.
      * @param value The value of 'ts'.
      * @return This builder.
      */
    public com.example.DNSLog.Builder setTs(long value) {
      validate(fields()[7], value);
      this.ts = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'ts' field has been set.
      * @return True if the 'ts' field has been set, false otherwise.
      */
    public boolean hasTs() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'ts' field.
      * @return This builder.
      */
    public com.example.DNSLog.Builder clearTs() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'query' field.
      * @return The value.
      */
    public java.lang.CharSequence getQuery() {
      return query;
    }


    /**
      * Sets the value of the 'query' field.
      * @param value The value of 'query'.
      * @return This builder.
      */
    public com.example.DNSLog.Builder setQuery(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.query = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'query' field has been set.
      * @return True if the 'query' field has been set, false otherwise.
      */
    public boolean hasQuery() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'query' field.
      * @return This builder.
      */
    public com.example.DNSLog.Builder clearQuery() {
      query = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'qclass' field.
      * @return The value.
      */
    public float getQclass() {
      return qclass;
    }


    /**
      * Sets the value of the 'qclass' field.
      * @param value The value of 'qclass'.
      * @return This builder.
      */
    public com.example.DNSLog.Builder setQclass(float value) {
      validate(fields()[9], value);
      this.qclass = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'qclass' field has been set.
      * @return True if the 'qclass' field has been set, false otherwise.
      */
    public boolean hasQclass() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'qclass' field.
      * @return This builder.
      */
    public com.example.DNSLog.Builder clearQclass() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'qclassname' field.
      * @return The value.
      */
    public java.lang.CharSequence getQclassname() {
      return qclassname;
    }


    /**
      * Sets the value of the 'qclassname' field.
      * @param value The value of 'qclassname'.
      * @return This builder.
      */
    public com.example.DNSLog.Builder setQclassname(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.qclassname = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'qclassname' field has been set.
      * @return True if the 'qclassname' field has been set, false otherwise.
      */
    public boolean hasQclassname() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'qclassname' field.
      * @return This builder.
      */
    public com.example.DNSLog.Builder clearQclassname() {
      qclassname = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'qtype' field.
      * @return The value.
      */
    public float getQtype() {
      return qtype;
    }


    /**
      * Sets the value of the 'qtype' field.
      * @param value The value of 'qtype'.
      * @return This builder.
      */
    public com.example.DNSLog.Builder setQtype(float value) {
      validate(fields()[11], value);
      this.qtype = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'qtype' field has been set.
      * @return True if the 'qtype' field has been set, false otherwise.
      */
    public boolean hasQtype() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'qtype' field.
      * @return This builder.
      */
    public com.example.DNSLog.Builder clearQtype() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'qtypename' field.
      * @return The value.
      */
    public java.lang.CharSequence getQtypename() {
      return qtypename;
    }


    /**
      * Sets the value of the 'qtypename' field.
      * @param value The value of 'qtypename'.
      * @return This builder.
      */
    public com.example.DNSLog.Builder setQtypename(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.qtypename = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'qtypename' field has been set.
      * @return True if the 'qtypename' field has been set, false otherwise.
      */
    public boolean hasQtypename() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'qtypename' field.
      * @return This builder.
      */
    public com.example.DNSLog.Builder clearQtypename() {
      qtypename = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'rcode' field.
      * @return The value.
      */
    public float getRcode() {
      return rcode;
    }


    /**
      * Sets the value of the 'rcode' field.
      * @param value The value of 'rcode'.
      * @return This builder.
      */
    public com.example.DNSLog.Builder setRcode(float value) {
      validate(fields()[13], value);
      this.rcode = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'rcode' field has been set.
      * @return True if the 'rcode' field has been set, false otherwise.
      */
    public boolean hasRcode() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'rcode' field.
      * @return This builder.
      */
    public com.example.DNSLog.Builder clearRcode() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'rcodename' field.
      * @return The value.
      */
    public java.lang.CharSequence getRcodename() {
      return rcodename;
    }


    /**
      * Sets the value of the 'rcodename' field.
      * @param value The value of 'rcodename'.
      * @return This builder.
      */
    public com.example.DNSLog.Builder setRcodename(java.lang.CharSequence value) {
      validate(fields()[14], value);
      this.rcodename = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'rcodename' field has been set.
      * @return True if the 'rcodename' field has been set, false otherwise.
      */
    public boolean hasRcodename() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'rcodename' field.
      * @return This builder.
      */
    public com.example.DNSLog.Builder clearRcodename() {
      rcodename = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'Z' field.
      * @return The value.
      */
    public int getZ() {
      return Z;
    }


    /**
      * Sets the value of the 'Z' field.
      * @param value The value of 'Z'.
      * @return This builder.
      */
    public com.example.DNSLog.Builder setZ(int value) {
      validate(fields()[15], value);
      this.Z = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'Z' field has been set.
      * @return True if the 'Z' field has been set, false otherwise.
      */
    public boolean hasZ() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'Z' field.
      * @return This builder.
      */
    public com.example.DNSLog.Builder clearZ() {
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'OR' field.
      * @return The value.
      */
    public boolean getOR() {
      return OR;
    }


    /**
      * Sets the value of the 'OR' field.
      * @param value The value of 'OR'.
      * @return This builder.
      */
    public com.example.DNSLog.Builder setOR(boolean value) {
      validate(fields()[16], value);
      this.OR = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'OR' field has been set.
      * @return True if the 'OR' field has been set, false otherwise.
      */
    public boolean hasOR() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'OR' field.
      * @return This builder.
      */
    public com.example.DNSLog.Builder clearOR() {
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'AA' field.
      * @return The value.
      */
    public boolean getAA() {
      return AA;
    }


    /**
      * Sets the value of the 'AA' field.
      * @param value The value of 'AA'.
      * @return This builder.
      */
    public com.example.DNSLog.Builder setAA(boolean value) {
      validate(fields()[17], value);
      this.AA = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'AA' field has been set.
      * @return True if the 'AA' field has been set, false otherwise.
      */
    public boolean hasAA() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'AA' field.
      * @return This builder.
      */
    public com.example.DNSLog.Builder clearAA() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'TC' field.
      * @return The value.
      */
    public boolean getTC() {
      return TC;
    }


    /**
      * Sets the value of the 'TC' field.
      * @param value The value of 'TC'.
      * @return This builder.
      */
    public com.example.DNSLog.Builder setTC(boolean value) {
      validate(fields()[18], value);
      this.TC = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'TC' field has been set.
      * @return True if the 'TC' field has been set, false otherwise.
      */
    public boolean hasTC() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'TC' field.
      * @return This builder.
      */
    public com.example.DNSLog.Builder clearTC() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'rejected' field.
      * @return The value.
      */
    public boolean getRejected() {
      return rejected;
    }


    /**
      * Sets the value of the 'rejected' field.
      * @param value The value of 'rejected'.
      * @return This builder.
      */
    public com.example.DNSLog.Builder setRejected(boolean value) {
      validate(fields()[19], value);
      this.rejected = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'rejected' field has been set.
      * @return True if the 'rejected' field has been set, false otherwise.
      */
    public boolean hasRejected() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'rejected' field.
      * @return This builder.
      */
    public com.example.DNSLog.Builder clearRejected() {
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'Answers' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getAnswers() {
      return Answers;
    }


    /**
      * Sets the value of the 'Answers' field.
      * @param value The value of 'Answers'.
      * @return This builder.
      */
    public com.example.DNSLog.Builder setAnswers(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[20], value);
      this.Answers = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'Answers' field has been set.
      * @return True if the 'Answers' field has been set, false otherwise.
      */
    public boolean hasAnswers() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'Answers' field.
      * @return This builder.
      */
    public com.example.DNSLog.Builder clearAnswers() {
      Answers = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'TLLs' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getTLLs() {
      return TLLs;
    }


    /**
      * Sets the value of the 'TLLs' field.
      * @param value The value of 'TLLs'.
      * @return This builder.
      */
    public com.example.DNSLog.Builder setTLLs(java.util.List<java.lang.Integer> value) {
      validate(fields()[21], value);
      this.TLLs = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'TLLs' field has been set.
      * @return True if the 'TLLs' field has been set, false otherwise.
      */
    public boolean hasTLLs() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'TLLs' field.
      * @return This builder.
      */
    public com.example.DNSLog.Builder clearTLLs() {
      TLLs = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DNSLog build() {
      try {
        DNSLog record = new DNSLog();
        record.uid = fieldSetFlags()[0] ? this.uid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.originh = fieldSetFlags()[1] ? this.originh : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.originp = fieldSetFlags()[2] ? this.originp : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.resph = fieldSetFlags()[3] ? this.resph : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.respp = fieldSetFlags()[4] ? this.respp : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.proto = fieldSetFlags()[5] ? this.proto : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.port = fieldSetFlags()[6] ? this.port : (java.lang.Integer) defaultValue(fields()[6]);
        record.ts = fieldSetFlags()[7] ? this.ts : (java.lang.Long) defaultValue(fields()[7]);
        record.query = fieldSetFlags()[8] ? this.query : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.qclass = fieldSetFlags()[9] ? this.qclass : (java.lang.Float) defaultValue(fields()[9]);
        record.qclassname = fieldSetFlags()[10] ? this.qclassname : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.qtype = fieldSetFlags()[11] ? this.qtype : (java.lang.Float) defaultValue(fields()[11]);
        record.qtypename = fieldSetFlags()[12] ? this.qtypename : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.rcode = fieldSetFlags()[13] ? this.rcode : (java.lang.Float) defaultValue(fields()[13]);
        record.rcodename = fieldSetFlags()[14] ? this.rcodename : (java.lang.CharSequence) defaultValue(fields()[14]);
        record.Z = fieldSetFlags()[15] ? this.Z : (java.lang.Integer) defaultValue(fields()[15]);
        record.OR = fieldSetFlags()[16] ? this.OR : (java.lang.Boolean) defaultValue(fields()[16]);
        record.AA = fieldSetFlags()[17] ? this.AA : (java.lang.Boolean) defaultValue(fields()[17]);
        record.TC = fieldSetFlags()[18] ? this.TC : (java.lang.Boolean) defaultValue(fields()[18]);
        record.rejected = fieldSetFlags()[19] ? this.rejected : (java.lang.Boolean) defaultValue(fields()[19]);
        record.Answers = fieldSetFlags()[20] ? this.Answers : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[20]);
        record.TLLs = fieldSetFlags()[21] ? this.TLLs : (java.util.List<java.lang.Integer>) defaultValue(fields()[21]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DNSLog>
    WRITER$ = (org.apache.avro.io.DatumWriter<DNSLog>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DNSLog>
    READER$ = (org.apache.avro.io.DatumReader<DNSLog>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.uid);

    out.writeString(this.originh);

    out.writeString(this.originp);

    out.writeString(this.resph);

    out.writeString(this.respp);

    out.writeString(this.proto);

    out.writeInt(this.port);

    out.writeLong(this.ts);

    out.writeString(this.query);

    out.writeFloat(this.qclass);

    out.writeString(this.qclassname);

    out.writeFloat(this.qtype);

    out.writeString(this.qtypename);

    out.writeFloat(this.rcode);

    out.writeString(this.rcodename);

    out.writeInt(this.Z);

    out.writeBoolean(this.OR);

    out.writeBoolean(this.AA);

    out.writeBoolean(this.TC);

    out.writeBoolean(this.rejected);

    long size0 = this.Answers.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.Answers) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.TLLs.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.lang.Integer e1: this.TLLs) {
      actualSize1++;
      out.startItem();
      out.writeInt(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.uid = in.readString(this.uid instanceof Utf8 ? (Utf8)this.uid : null);

      this.originh = in.readString(this.originh instanceof Utf8 ? (Utf8)this.originh : null);

      this.originp = in.readString(this.originp instanceof Utf8 ? (Utf8)this.originp : null);

      this.resph = in.readString(this.resph instanceof Utf8 ? (Utf8)this.resph : null);

      this.respp = in.readString(this.respp instanceof Utf8 ? (Utf8)this.respp : null);

      this.proto = in.readString(this.proto instanceof Utf8 ? (Utf8)this.proto : null);

      this.port = in.readInt();

      this.ts = in.readLong();

      this.query = in.readString(this.query instanceof Utf8 ? (Utf8)this.query : null);

      this.qclass = in.readFloat();

      this.qclassname = in.readString(this.qclassname instanceof Utf8 ? (Utf8)this.qclassname : null);

      this.qtype = in.readFloat();

      this.qtypename = in.readString(this.qtypename instanceof Utf8 ? (Utf8)this.qtypename : null);

      this.rcode = in.readFloat();

      this.rcodename = in.readString(this.rcodename instanceof Utf8 ? (Utf8)this.rcodename : null);

      this.Z = in.readInt();

      this.OR = in.readBoolean();

      this.AA = in.readBoolean();

      this.TC = in.readBoolean();

      this.rejected = in.readBoolean();

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.Answers;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("Answers").schema());
        this.Answers = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<java.lang.Integer> a1 = this.TLLs;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.lang.Integer>((int)size1, SCHEMA$.getField("TLLs").schema());
        this.TLLs = a1;
      } else a1.clear();
      SpecificData.Array<java.lang.Integer> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.Integer e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readInt();
          a1.add(e1);
        }
      }

    } else {
      for (int i = 0; i < 22; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.uid = in.readString(this.uid instanceof Utf8 ? (Utf8)this.uid : null);
          break;

        case 1:
          this.originh = in.readString(this.originh instanceof Utf8 ? (Utf8)this.originh : null);
          break;

        case 2:
          this.originp = in.readString(this.originp instanceof Utf8 ? (Utf8)this.originp : null);
          break;

        case 3:
          this.resph = in.readString(this.resph instanceof Utf8 ? (Utf8)this.resph : null);
          break;

        case 4:
          this.respp = in.readString(this.respp instanceof Utf8 ? (Utf8)this.respp : null);
          break;

        case 5:
          this.proto = in.readString(this.proto instanceof Utf8 ? (Utf8)this.proto : null);
          break;

        case 6:
          this.port = in.readInt();
          break;

        case 7:
          this.ts = in.readLong();
          break;

        case 8:
          this.query = in.readString(this.query instanceof Utf8 ? (Utf8)this.query : null);
          break;

        case 9:
          this.qclass = in.readFloat();
          break;

        case 10:
          this.qclassname = in.readString(this.qclassname instanceof Utf8 ? (Utf8)this.qclassname : null);
          break;

        case 11:
          this.qtype = in.readFloat();
          break;

        case 12:
          this.qtypename = in.readString(this.qtypename instanceof Utf8 ? (Utf8)this.qtypename : null);
          break;

        case 13:
          this.rcode = in.readFloat();
          break;

        case 14:
          this.rcodename = in.readString(this.rcodename instanceof Utf8 ? (Utf8)this.rcodename : null);
          break;

        case 15:
          this.Z = in.readInt();
          break;

        case 16:
          this.OR = in.readBoolean();
          break;

        case 17:
          this.AA = in.readBoolean();
          break;

        case 18:
          this.TC = in.readBoolean();
          break;

        case 19:
          this.rejected = in.readBoolean();
          break;

        case 20:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.Answers;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("Answers").schema());
            this.Answers = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 21:
          long size1 = in.readArrayStart();
          java.util.List<java.lang.Integer> a1 = this.TLLs;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.Integer>((int)size1, SCHEMA$.getField("TLLs").schema());
            this.TLLs = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.Integer> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.Integer e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readInt();
              a1.add(e1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










